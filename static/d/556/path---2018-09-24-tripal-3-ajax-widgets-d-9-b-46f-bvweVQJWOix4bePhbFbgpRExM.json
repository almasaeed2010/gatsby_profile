{"data":{"markdownRemark":{"html":"<h1>Introduction</h1>\n<p>Link: <a href=\"https://github.com/tripal/tripal/issues/607\">original GitHub issue</a></p>\n<p>I found myself in a predicament: I wanted to include a dynamic element in my Tripal field's formatter.  </p>\n<p>However, I couldnt for the life of me get the AJAX callback to run in the formatter.</p>\n<!--more-->\n<h3>The problem: renderable arrays</h3>\n<p>Drupal has its special way of doing AJAX!  <a href=\"https://api.drupal.org/api/drupal/includes%21ajax.inc/group/ajax/7.x\">You should read the documentation carefully!</a>.  To Drupal, AJAX only makes sense as on forms.</p>\n<p>Here's the problem: formatters <strong>are not forms</strong>.  Instead, they are <a href=\"https://www.drupal.org/docs/7/api/render-arrays/render-arrays-overview\">renderable arrays</a>!  This is obvious in hindsight: rather than accepting <code>$form</code> and <code>&#x26;$form_state</code>, they accept <code>&#x26;$element, $entity_type, $entity, $langcode, $items, $display</code>, where <code>$element</code> is the renderable array.</p>\n<p>This means if we want to add an AJAX callback, we actually need a <strong>seperate form file</strong> tahts get added in using <code>drupal_get_form()</code>.  If we do this, we can build the AJAX as Drupal expects it.</p>\n<h3>the solution: <code>drupal_get_form</code></h3>\n<p>Here's my form file: as you can see its a standard form following Drupal AJAX conventions.  We provide a <code>rendered_maps</code> fieldset with the prefix defining the wrapper.  The selector has specifies that wrapper, and the AJAX callback function <code>tripalmap_organism_featuremap_callback</code>.  We then define that function to simply return  the piece of the form that should be rebuilt: the <code>rendered_maps</code> fieldset!</p>\n<pre><code class=\"language-php\">function tripal_map_organism_featuremap_selector($form, &#x26;$form_state, $select) {\n\n  $selected = 0;\n\n  if (isset($form_state['values']['featuremap_select'])) {\n    $selected = isset($form_state['values']['featuremap_select']);\n  }\n\n\n  $form['rendered_maps'] = [\n    '#type' => 'fieldset',\n    '#collapsible' => FALSE,\n    '#prefix' => '&#x3C;div id=\"tripalmap-featuremap-organism-selector-wrapper\">',\n    '#suffix' => '&#x3C;/div>',\n  ];\n\n\n  $form['rendered_maps']['featuremap_select'] = [\n    '#type' => 'select',\n    '#options' => $select,\n    '#title' => 'Please select a map to view',\n    '#default_value' => $selected,\n    '#ajax' => [\n      'callback' => 'tripalmap_organism_featuremap_callback',\n      'wrapper' => 'tripalmap-featuremap-organism-selector-wrapper',\n      'effect' => 'fade',\n    ],\n  ];\n\n\n  $chosen = 0;\n\n  if (isset($form_state['values']['featuremap_select'])) {\n    $chosen = $form_state['input']['featuremap_select'];\n  }\n\n  if ($chosen != 0) {\n\n\n    $mini_form = tripal_map_genetic_map_overview_form([], $form_state, $chosen);\n\n    $form['rendered_maps']['map'] = $mini_form;\n\n    return $form;\n  }\n\n  return $form;\n}\n\n/**\n * @param $form\n * @param $form_state\n *\n * @return mixed\n */\nfunction tripalmap_organism_featuremap_callback($form, &#x26;$form_state) {\n\n  return $form['rendered_maps'];\n}\n</code></pre>\n<p>In the field formatter, we simply add this form and put the markup in the element:</p>\n<pre><code class=\"language-php\">      //multiple maps for this organism, let user select.  Create a special form for that so we can have an AJAX select box\n      $select= $select + $select_add;\n\n      $form = drupal_get_form('tripal_map_organism_featuremap_selector', $select);\n      $content = drupal_render($form);\n        $element[] = [\n          '#type' => 'markup',\n          '#markup' => $content,\n        ];\n        return $element;\n    }\n</code></pre>","frontmatter":{"title":"AJAX and widgets in Tripal 3"}}},"pageContext":{"slug":"/2018-09-24-tripal3_ajax_widgets/"}}