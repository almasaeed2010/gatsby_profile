{"data":{"markdownRemark":{"html":"<p>I was recently tasked with using the Tripal GFF loader to add genomic coordinates to our mRNA features.  The Tripal.info tutorial <a href=\"http://tripal.info/tutorials/v3.x/example-genomic-site/genomic-data\">covers using the GFF loader</a> to load in features, but at Hardwoods we don't typically follow this paradigm, and only load in features using the FASTA loader.</p>\n<p><img src=\"/assets/img/TripalLogo_dark.png\" alt=\"Tripal Logo\"></p>\n<!--more-->\n<h1>The GFF3 file</h1>\n<p>Before we begin, lets look at a GFF3 file.</p>\n<pre><code>Contig0 FRAEX38873_v2   gene    16315   44054   .   +   .   ID=FRAEX38873_v2_000000010;Name=FRAEX38873_v2_000000010;biotype=protein_coding\nContig0 FRAEX38873_v2   mRNA    16315   44054   .   +   .   ID=FRAEX38873_v2_000000010.1;Parent=FRAEX38873_v2_000000010;Name=FRAEX38873_v2_000000010.1;biotype=protein_coding;AED=0.05\n</code></pre>\n<p>Each entry specifies, in order, the contig the feature is located on (The <strong>Landmark</strong>: see below), the assembly version, the feature type, the start, end, and strand information of the feature.  The final column contains annotations.  Most importantly are the <strong>Name</strong> tag which the GFF file will match when looking for your feature (or use as the name when creating the new feature), and the <strong>Parent</strong> tag.  The parent <strong>must</strong> exist for the loader to continue.  </p>\n<p>In our case, we need to specify a landmark type in order for the loader to work.  If you get an error like the one specified below, then your contigs or scaffolds are not loaded, or there is a discrepency in the names in your database and in your GFF file.</p>\n<blockquote>\n<p>The landmark 'Contig0' cannot be found for this organism (Fraxinus excelsior) Please add the landmark and then retry the import of this GFF3 file</p>\n</blockquote>\n<h1>Loading the Contigs FASTA</h1>\n<p>Whatever sequence is the landmark type must be loaded prior to running the GFF importer.  The contig FASTA files are quite large, and we don't do very much with the data.  We therefore can strip the FASTA sequences from the file using sed or a custom script.  I provide an example script at the end of this file: it would be easier to use sed but I already had this program written.</p>\n<h1>Loading the GFF3 file</h1>\n<h3>Cleaning the input GFF3</h3>\n<p>If you'd like, you can clean up the GFF3 file to remove feature types you don't want inserted into your database.</p>\n<pre><code class=\"language-shell\"> awk '{if ($3 == \"gene\"  || $3 == \"mrna\" ) {print}} ' e_walnut_filter.gff\n</code></pre>\n<p>The above command will output rows of the GFF file where the third row (the annotation type) is equal to either gene or mrna.  You can pipe the results to a new file using hte <code>> output.txt</code> operator after the command.</p>\n<p> <strong>note</strong>: There can be additional problems with the input GFF file: if the loader fails, check the format of the input GFF.  For example, the below line of a GFF file failed for me because it included a <code>;</code> within a tag definition (the <code>protein 1;4</code>).</p>\n<pre><code>jcf7180001222097    maker   gene    1838197 1841620 .   -   .   ID=WALNUT_00004175;Name=WALNUT_00004175;Alias=PREDICTED: nucleosome assembly protein 1;4,Interpro:IPR002164,Pfam:PF00956;Note=high_quality_complete_model;\n</code></pre>\n<p>In this case I had to manually change these semicolons to commas.</p>\n<p>In another case, I got <code>dbxref</code> errors due to extra tags in the description: </p>\n<p><code>ID=QlobV1.0_scaffold68_0000030-RA;Parent=QlobV1.0_scaffold68_0000030;Name=QlobV1.0_scaffold68_0000030-RA;Alias=maker-scaffold68-augustus-gene-0.26-mRNA-1;Dbxref=InterPro:IPR001650,Pfam:PF00271;Note=Similar to Eukaryotic initiation factor 4A-3 (Nicotiana plumbaginifolia);_ AED=0.08;_QI=0|0|0|1|1|1|2|0|123;_eAED=0.08;</code></p>\n<p>Since I'm pretty sure we don't need those AED, QI entries, we can remove them with sed:</p>\n<p><code>sed 's/_AED.*?\\(;\\)//g' Qlob.v1.0.annV1.0.gff > Qlob_modified.gff</code></p>\n<p><code>sed -i 's/_eAED.*?\\(;\\)//g' Qlob_modified2.gff >Qlob_modified3.gff</code>\n<code>sed -i 's/_QI.*?\\(;\\)//g' Qlob_modified3.gff > Qlob_modified_final.gff</code></p>\n<p>If you've already loaded the features, don't worry, I give examples below for how to easily delete unintended features.</p>\n<h3>Renaming features in the GFF3</h3>\n<p>You might have to rename some of your features to get them loaded properly in the database.  For example, our English Walnut mRNAs had some information appended/prepended to the name.  We used this command to add it in: <code>sed ‘s/\\(WALNUT_[0-9]*-RA\\)/Juglans_regia_01182017_\\1_mRNA/g’ Reju_v4.gff</code>.</p>\n<h3>Running the GFF3 loader</h3>\n<h1>Cleaning up additional features</h1>\n<p>Tripal will insert features for <em>everything</em> in your GFF file.  This means, for example, 5' and 3' untranslated features might now be in your Chado database, even if you have no intention of using that data.  To clean up, first let's look at all the <code>type_id</code>s in our Chado database.</p>\n<pre><code>SELECT DISTINCT CF.type_id, CVT.name FROM chado.feature AS CF\n    INNER JOIN chado.cvterm AS CVT ON CVT.cvterm_id = CF.type_id;\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>ID</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>exxon</td>\n<td>288</td>\n</tr>\n<tr>\n<td>contig</td>\n<td>105</td>\n</tr>\n<tr>\n<td>mRNA</td>\n<td>145</td>\n</tr>\n<tr>\n<td>gene</td>\n<td>215</td>\n</tr>\n<tr>\n<td>polypeptide</td>\n<td>236</td>\n</tr>\n<tr>\n<td>CDS</td>\n<td>237</td>\n</tr>\n<tr>\n<td>exon</td>\n<td>288</td>\n</tr>\n<tr>\n<td>supercontig</td>\n<td>290</td>\n</tr>\n<tr>\n<td>five<em>prime</em>UTR</td>\n<td>354</td>\n</tr>\n<tr>\n<td>three<em>prime</em>UTR</td>\n<td>355</td>\n</tr>\n<tr>\n<td>mRNA_contig</td>\n<td>101394</td>\n</tr>\n</tbody>\n</table>\n<p>In my case, the UTRs, exons, and CDS are all unnecessary: let's remove them.</p>\n<pre><code>SET search_path TO chado, public;\nDELETE FROM chado.feature WHERE type_id IN (355, 354, 237, 288);\n</code></pre>\n<p>We need to set the search path to include prior to deleting: otherwise the command will fail.</p>\n<p>If you make mistakes in your featureloc table, deleting them can be a bit tricky too.</p>\n<pre><code>DELETE FROM chado.featureloc FL WHERE FL.feature_id IN (SELECT feature_id FROM chado.feature where organism_id IN (42, 24, 48));\n</code></pre>\n<p>Here I delete things from the featureloc table that match my organisms with errors.</p>\n<h1>Perl script for removing sequences from FASTA</h1>\n<pre><code class=\"language-perl\">#!/usr/bin/env perl\n#simple Bioperl script to remove seqs from FASTA file.\n\nuse strict;\nuse warnings;\nuse Getopt::Long;\nuse Bio::SeqIO;\nuse Data::Dumper;\n# usage\nmy $usage = \"$0 -i|input fasta_input_files \\n\";\n\n# global values\nmy $input_file;\n\n# read user options\nGetOptions(\n    \"i|input=s\" => \\$input_file,\n);\n\n# check for user parameters\nif( !$input_file ){\n    die $usage;\n}\n\n# open input fasta file\nunless( -e $input_file ){\n    die \"error: cannot find fasta input file $input_file\\n\";\n}\nmy $input = Bio::SeqIO->new (-file => \"&#x3C;$input_file\", '-format' => 'Fasta')\n    or die \"error: failure opening fasta $input_file for reading: $!\\n\";\n\n# make temporary fasta file and print header line\nmy $output_file = \"$input_file.empty.fasta\";\nopen( OUT, \">$output_file\" )\n    or die \"error: cannot open $output_file for writing: $!\\n\";\n# step through sequences in input fasta file\nwhile( my $seqObject = $input->next_seq ){\n    \n    # get sequence information\n    my $id  = $seqObject->id;\n    my $seq = $seqObject->seq;\n\n        print \"extracting $id\\n\";\n        print OUT \">$id\\n\",\"\\n\";    \n    \n}\n</code></pre>","frontmatter":{"title":"Tripal GFF Loader"}}},"pageContext":{"slug":"/2018-03-28-loading_gff3_tripal/"}}