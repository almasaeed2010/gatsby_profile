{"data":{"markdownRemark":{"html":"<p>Note that I'm going to talk about features a lot in this post.  In the context of the Feature module, features are exported configurations within your site.  It's important that we don't confuse this with Chado features, which are genes, mRNAs, polypeptides, etc.</p>\n<p><a href=\"https://www.drupal.org/docs/7/modules/features\">Features module guide</a></p>\n<p>It appears that some of the allure of Features is diminished in Drupal 8. Drupal 8 offers a configuration management system that focuses on the use case of going from a staging site to a production site.  Still, Features is more concerned with sharing configurations among multiple sites, so it will remain relevant for Drupal 8.</p>\n<h2>A simple use case</h2>\n<p>Consider a case where we have a development site where we configure a bundle (let's say the vanilla Analysis bundle) to have a custom set of Tripal Panes, with fields carefully reorganized into the panes.  In particular, we attach a Drupal File field to it, so we can host FASTA files easily.</p>\n<p>Once we've configured the field settings, how do we get them to the live site?  One option is to open our field configuration admin UI on both sites, and copy the details one at a time.  This method is <a href=\"https://www.drupal.org/docs/7/modules/features/features-moving-site-configuration-to-code\">time consuming and error prone</a>, although it is relatively safe: we arent liable to accidentally break our database this way.</p>\n<p>Is there a better way?  By exporting the field configuration as a feature!</p>\n<p>(note: drupal 8 has a feature designed ot handle development deployment!  But features remains relevant for sharing field configurations across sites).</p>\n<h2>Mapping bundle IDs</h2>\n<p>The main hurdle to overcome when mapping features is converting the field machine names across site.  This is because each field instance is specific to the bundle it's attached to, and bundle machine-names are from the bundle ID.  We can't assume bundle IDs are consistent across sites!</p>\n<p>So what do we do?  Interestingly, roles have a similar problem, and a <a href=\"https://www.drupal.org/docs/7/modules/features/exportables-and-user-role-ids-in-features\">guide is available</a> for dealing with them.</p>\n<p>The general strategy is:</p>\n<ul>\n<li>remove the exported id value from the <code class=\"language-text\">features.inc</code> file,</li>\n<li>use hook alter to fetch the ID on the target deployment setup</li>\n</ul>\n<p>In our example, we want to export an image field attached to the vanilla Analysis bundle, so, we can use the ontology term associated to lookup the bundle and fetch the ID.</p>\n<h2>Version control</h2>\n<p>Because features get exported as their own module, this means you can treat them as such.  You can initialize a git repo, store them on GitHub, make discrete versions, and in general benefit from version control for something which otherwise would only be done via the UI.</p>\n<h2>How many Features?</h2>\n<p>The features documentation links to a <a href=\"http://kerasai.com/blog/2014/04/08/organizing-features-configuration-managment\">great article about how to manage multiple features</a>.  The suggestion that each bundle be its own feature is particularly helpful for Tripal, since we have so many bundles and its a reasonable, discrete way to manage and deploy configuration.  This means that mRNA and gene should be separate feature modules even though they are both <code class=\"language-text\">chado.feature</code> content types.</p>\n<h2>Tutorial</h2>\n<h3>Configuring the bundle fields</h3>\n<p>Now, let's quickly configure a bundle.  Navigate to the structure of your site and select Analysis (<strong>Admin ->Structure -> Tripal Content -> Analysis -> Manage Fields</strong>).  Scroll to the bottom and add a new field of type File, with a machine name of <code class=\"language-text\">field_fasta_fileâ€Ž</code>, and click <strong>Save</strong>. We can use the default field settings on the next page, so click <strong>Save</strong>.</p>\n<p>We now have to pick a CV term for our field.  Because we are providing a FASTA file field, we can use a term such as <a href=\"https://www.ebi.ac.uk/ols/ontologies/ero/terms?iri=http%3A%2F%2Fwww.ebi.ac.uk%2Fefo%2Fswo%2FSWO_0000142\">FASTA (SWO:0000142)</a>.  Please see the <a href=\"https://tripal.readthedocs.io/en/latest/user_guide/content_types/creating_content.html?highlight=term#manually-adding-a-term\">Tripal vocabulary  guide</a> for help loading a term.  Once the term is in our DB, we can assign it to this field.</p>\n<p><img src=\"/img/features_2018-11-09/assign_term.png\" alt=\"assign term to field\"></p>\n<p>Now lets configure our field display.  Click the <strong>Manage Display Tab</strong> at the top, and create and enable a \"Files\" Tripal Pane, placing our new field in the Pane.  </p>\n<p><img src=\"/img/features_2018-11-09/config_display.png\" alt=\"enable display\"></p>\n<p>You can verify your new field is enabled and working by creating a new Analysis and inspecting the \"FASTA file\" field.</p>\n<p><img src=\"/img/features_2018-11-09/fasta_field_input.png\" alt=\"confirm field is set up\"></p>\n<h3>Exporting the bundle field displays</h3>\n<p>Once we are happy with our bundle field configuration, we can export the display settings using the Drupal Features module.</p>\n<p>First, we enable the Features module using drush: <code class=\"language-text\">drush pm-enable features -y</code>.  This adds a Features area under <strong>Admin -> Structure</strong>.  Navigate there and choose <strong>Create Feature</strong>.</p>\n<p>The field information we're looking for is in <strong>Field Bases</strong>, <strong>Field Group</strong>, and <strong>Field Instances</strong>.  We can search for FASTA to find the field base and instance, and \"files\" (the name of our group) to find the field group.</p>\n<p>I've also specified a custom path to keep all my tripal features together under advanced options.</p>\n<p><img src=\"/img/features_2018-11-09/feature_configuration.png\" alt=\"image\"></p>\n<p>If we download and unzip our feature module, we can see it includes all the trappings of a Drupal module.</p>\n<p><img src=\"/img/features_2018-11-09/unzipped_dir.png\" alt=\"image\"></p>\n<p>As you can see, however, it makes the assumption that <code class=\"language-text\">bio_data_2</code> is the correct bundle to configure fields for.  However, Tripal makes no guarantee of that.  One solution would be to manually relabel bio<em>data</em>x to the correct bundle ID.  On a smaller scale, this is a reasonable solution.  If you aren't sure what your bundle ID is, look in the URL when configuring the fields for it:  my constructed URL for example was <code class=\"language-text\">admin/structure/bio_data/manage/bio_data_2/fields</code>.</p>\n<h3>Importing the feature configuration</h3>\n<p><img src=\"/img/features_2018-11-09/\" alt=\"image\"></p>","frontmatter":{"title":"Understanding Drupal Features"}}},"pageContext":{"slug":"/2018-11-09-understanding_drupal_features/"}}